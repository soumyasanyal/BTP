import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.mouse.NativeMouseEvent;
import org.jnativehook.mouse.NativeMouseInputListener;
import org.jnativehook.mouse.NativeMouseWheelEvent;
import org.jnativehook.mouse.NativeMouseWheelListener;

public class GlobalMouseListenerExample implements NativeMouseInputListener, NativeMouseWheelListener
{
	
	private long lastEventTime;
	
	/**
	 * @return the lastEventTime
	 */
	public long getLastEventTime() {
		return lastEventTime;
	}

	/**
	 * @param lastEventTime the lastEventTime to set
	 */
	public void setLastEventTime(long lastEventTime) {
		this.lastEventTime = lastEventTime;
	}

	//write to file using bufferedWriter
	private BufferedWriter getBufferedWriter()
	{
		BufferedWriter bwriter;
		try
		{
			File f = new File("log.txt");
			//create file if it doesn't exist
			if(!f.exists())
			{
				f.createNewFile();
			}
			
			FileWriter writer = new FileWriter(f.getName(), true);	//append
			//FileWriter writer = new FileWriter(f.getName());
			bwriter = new BufferedWriter(writer);
			return bwriter;
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public void nativeMouseClicked(NativeMouseEvent e)
	{
//		try
//		{
//			BufferedWriter bwriter = this.getBufferedWriter();
//			long currentTime = e.getWhen();
//			long relativeTime = currentTime - this.getLastEventTime();
//			this.setLastEventTime(currentTime);
//			bwriter.write("MC, " + e.getClickCount() + ", " + relativeTime + "\n");
//			bwriter.close();
//		}
//		catch (IOException e1)
//		{
//			e1.printStackTrace();
//		}
	}

	public void nativeMousePressed(NativeMouseEvent e)
	{
//		try
//		{
//			BufferedWriter bwriter = this.getBufferedWriter();
//			long currentTime = e.getWhen();
//			long relativeTime = currentTime - this.getLastEventTime();
//			this.setLastEventTime(currentTime);
//			bwriter.write("MP, " + e.getButton() + ", " + relativeTime + "\n");
//			bwriter.close();
//		}
//		catch (IOException e1)
//		{
//			e1.printStackTrace();
//		}
	}

	public void nativeMouseReleased(NativeMouseEvent e)
	{
//		try
//		{
//			BufferedWriter bwriter = this.getBufferedWriter();
//			long currentTime = e.getWhen();
//			long relativeTime = currentTime - this.getLastEventTime();
//			this.setLastEventTime(currentTime);
//			bwriter.write("MR, " + e.getButton() + ", " + relativeTime + "\n");
//			bwriter.close();
//		}
//		catch (IOException e1)
//		{
//			e1.printStackTrace();
//		}
	}

	public void nativeMouseMoved(NativeMouseEvent e)
	{
//		try
//		{
//			BufferedWriter bwriter = this.getBufferedWriter();
//			long currentTime = e.getWhen();
//			long relativeTime = currentTime - this.getLastEventTime();
//			this.setLastEventTime(currentTime);
//			bwriter.write("MM, " + e.getX() + ", " + e.getY() + ", " + relativeTime + "\n");
//			bwriter.close();
//		}
//		catch (IOException e1)
//		{
//			e1.printStackTrace();
//		}
	}

	public void nativeMouseDragged(NativeMouseEvent e)
	{
//		try
//		{
//			BufferedWriter bwriter = this.getBufferedWriter();
//			long currentTime = e.getWhen();
//			long relativeTime = currentTime - this.getLastEventTime();
//			this.setLastEventTime(currentTime);
//			bwriter.write("MD, " + e.getX() + ", " + e.getY() + ", " + relativeTime + "\n");
//			bwriter.close();
//		}
//		catch (IOException e1)
//		{
//			e1.printStackTrace();
//		}
	}
	
	public void nativeMouseWheelMoved(NativeMouseWheelEvent e)
	{
		try
		{
			BufferedWriter bwriter = this.getBufferedWriter();
			long currentTime = e.getWhen();
			long relativeTime = currentTime - this.getLastEventTime();
			this.setLastEventTime(currentTime);
			bwriter.write("MWM, " + e.getX() + ", " + e.getY() + ", " + e.getWheelRotation() + ", " + e.getScrollAmount() + ", " + e.getScrollType() + ", " + relativeTime + "\n");
			bwriter.close();
		}
		catch (IOException e1)
		{
			e1.printStackTrace();
		}
	}

	public static void main(String[] args)
	{
		// Clear previous logging configurations.
		LogManager.getLogManager().reset();

		// Get the logger for "org.jnativehook" and set the level to off.
		Logger logger = Logger.getLogger(GlobalScreen.class.getPackage().getName());
		logger.setLevel(Level.OFF);
		
		try
		{
			GlobalScreen.registerNativeHook();
			
			File f = new File("log.txt");
			//create file if it doesn't exist
			if(!f.exists())
			{
				f.createNewFile();
			}
			else	//file already exists so append with current time-stamp
			{
				FileWriter writer = new FileWriter(f.getName(), true);	//append
				//FileWriter writer = new FileWriter(f.getName());
				BufferedWriter bwriter = new BufferedWriter(writer);
				bwriter.write("************************************************************************************\n");
				String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
				bwriter.write("LOGGING TIME: " + timeStamp + "\n");
				bwriter.write("************************************************************************************\n");
				bwriter.close();
			}
		}
		catch (NativeHookException | IOException ex)
		{
			System.err.println("There was a problem registering the native hook.");
			System.err.println(ex.getMessage());

			System.exit(1);
		}
		
		//Construct the example object.
		GlobalMouseListenerExample example = new GlobalMouseListenerExample();
		
		//set last event time to system time in milliseconds
		example.setLastEventTime(System.currentTimeMillis());
		
		//Add the appropriate listeners for the example object.
		GlobalScreen.addNativeMouseListener(example);
		GlobalScreen.addNativeMouseMotionListener(example);
		GlobalScreen.addNativeMouseWheelListener(example);
	}
}
